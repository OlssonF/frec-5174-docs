# Data assimilation: particle filter 2

```{r}
#| echo: FALSE
source("R/helpers.R")
source("R/forest_model.R")
```

```{r}
ens_members <- 100
sim_dates <- seq(Sys.Date() - 30, Sys.Date() - 1, by = "1 day")
```

```{r}
site <- "TALL"
met_s3 <- arrow::s3_bucket(paste0("bio230014-bucket01/neon4cast-drivers/noaa/gefs-v12/stage3/site_id=", site),
                           endpoint_override = "sdsc.osn.xsede.org",
                           anonymous = TRUE)

inputs_all <- arrow::open_dataset(met_s3) |> 
  filter(variable %in% c("air_temperature", "surface_downwelling_shortwave_flux_in_air")) |> 
  mutate(datetime = as_date(datetime)) |> 
  mutate(prediction = ifelse(variable == "surface_downwelling_shortwave_flux_in_air", prediction/0.486, prediction),
         variable = ifelse(variable == "surface_downwelling_shortwave_flux_in_air", "PAR", variable),
         prediction = ifelse(variable == "air_temperature", prediction - 273.15, prediction),
         variable = ifelse(variable == "air_temperature", "temp", variable)) |> 
  summarise(prediction = mean(prediction, na.rm = TRUE), .by = c("datetime", "variable")) |> 
  mutate(parameter = 1) |> 
  collect()
```

```{r}
params <- list()
params$alpha <- rep(0.02, ens_members)
params$SLA <- rep(4.74, ens_members)
params$leaf_frac <- rep(0.315, ens_members)
params$Ra_frac <- rep(0.5, ens_members)
params$Rbasal <- rep(0.002, ens_members)
params$Q10 <- rep(2.1, ens_members)
params$litterfall <- rep(1/(365*2), ens_members) #Two year leaf lifespan
params$mortality <- rep(0.00015, ens_members) #Wood lives about 18 years on average (all trees, branches, roots, course roots)
params$sigma.leaf <- rep(0.01, ens_members) #0.01 
params$sigma.stem <- rep(0.01, ens_members) #0.01 ## wood biomass
params$sigma.soil <- rep(0.01, ens_members)# 0.01
params <- as.data.frame(params)
```

```{r}
obs <- read_csv("data/site_carbon_data.csv", show_col_types = FALSE)
state_init <- rep(NA, 3)

state_init[1] <- obs |> 
  filter(variable == "lai",
         datetime %in% sim_dates) |> 
  na.omit() |> 
  summarise(observation = mean(observation, na.rm = TRUE)) |> 
  mutate(observation = observation / (mean(params$SLA) * 0.1)) |> 
  pull(observation)

state_init[2] <- obs |> 
  filter(variable == "wood") |> 
  na.omit() |> 
  slice(1) |> 
  pull(observation)

state_init[3] <- obs |> 
  filter(variable == "som") |> 
  na.omit() |>  
  slice(1) |> 
  pull(observation)
```

```{r}
#Set initial conditions
forecast <- array(NA, dim = c(length(sim_dates), ens_members, 12)) #12 is the number of outputs
forecast[1, , 1] <- state_init[1]
forecast[1, , 2] <- state_init[2]
forecast[1, , 3] <- state_init[3]

wt <- array(1, dim = c(length(sim_dates), ens_members))

inputs <- inputs_all |> 
  filter(datetime %in% sim_dates)
inputs_ensemble <- assign_met_ensembles(inputs, ens_members, var_order = c("temp","PAR"))
```

```{r}
fit_params_table <- read_csv("data/saved_parameter_chain.csv", show_col_types = FALSE) |> 
  pivot_wider(names_from = parameter, values_from = value)

num_pars <- 2
fit_params <- array(NA, dim = c(length(sim_dates) ,ens_members , num_pars))
samples <- sample(1:nrow(fit_params_table), size = ens_members, replace = TRUE)
fit_params[1, , 1] <- fit_params_table$alpha[samples]
fit_params[1, , 2] <- fit_params_table$Rbasal[samples]


 
for(t in 2:length(sim_dates)){
  
      fit_params[t, , 1] <- rnorm(ens_members, fit_params[t-1, ,1], sd = 0.0005)
      fit_params[t, , 2] <- rnorm(ens_members, fit_params[t-1, ,2], sd = 0.0005)

    params$alpha  <- fit_params[t, , 1]
    params$Rbasal  <- fit_params[t, , 2]

  
  
  forecast[t, , ]  <- forest_model(t, 
                           states = matrix(forecast[t-1 , , 1:3], nrow = ens_members) , 
                           parms = params, 
                           inputs = matrix(inputs_ensemble[t , , ], nrow = ens_members))
  
  curr_obs <- obs |> 
    filter(datetime == sim_dates[t],
           variable %in% c("nee"))
  
  if(nrow(curr_obs) > 0){
    
    forecast_df <- output_to_df(forecast[t, , ], sim_dates[t], sim_name = "parameter_unc")

    
    combined_output_obs <- combine_model_obs(forecast_df, 
                                             obs = curr_obs,
                                             variables = c("lai", "wood", "som", "nee"), 
                                             sds = c(0.5, 20, 20, 0.005))
     
    likhood <- rep(0, ens_members)
    for(ens in 1:ens_members){
      
      curr_ens <- combined_output_obs |> 
        filter(ensemble == ens)
      
      likhood[ens] <- exp(sum(dnorm(x =  curr_ens$observation, 
                                    mean = curr_ens$prediction, 
                                    sd = curr_ens$sds, log = TRUE)))
    }
    
    wt[t, ] <- likhood * wt[t-1, ]
    
    wt_norm <-  wt[t, ]/sum(wt[t, ])
    Neff = 1/sum(wt_norm^2)

    if(Neff < ens_members/2){
      ## resample ensemble members in proportion to their weight
      resample_index <- sample(1:ens_members, ens_members, replace = TRUE, prob = wt_norm ) 
      forecast[t, , ] <- as.matrix(forecast[t, resample_index, 1:12])  ## update state
      fit_params[t, , ] <- as.matrix(fit_params[t, resample_index, ])
      wt[t, ] <- rep(1, ens_members)
    }
  }
}
```

```{r}
forecast_weighted <- array(NA, dim = c(length(sim_dates), ens_members, 12))
params_weighted <- array(NA, dim = c(length(sim_dates) ,ens_members , num_pars))
for(t in 1:length(sim_dates)){
      resample_index <- sample(1:ens_members, ens_members, replace = TRUE, prob = wt_norm ) 
      forecast_weighted[t, , ] <- forecast[t, resample_index, 1:12] 
      params_weighted[t, , ] <- fit_params[t,resample_index , ] 
}
output_df <- output_to_df(forecast_weighted, sim_dates, sim_name = "parameter_unc")
parameter_df <- parameters_to_df(params_weighted, sim_dates, sim_name = "parameter_unc", param_names = "alpha")
```

```{r}
obs_dates <- obs |> 
  filter(variable == "nee") |> 
  pull(datetime)

output_df |> 
  left_join(obs, by = c("datetime", "variable")) |> 
  filter(variable %in% c("nee","wood","som","lai")) |> 
  ggplot(aes(x = datetime)) +
  geom_line(aes(y = prediction, group = ensemble)) +
  geom_point(aes(y = observation), color = "red") +
  #geom_vline(xintercept = obs_dates) + 
  facet_wrap(~variable, scale = "free")
```

```{r}
parameter_df |> 
  ggplot(aes(datetime, prediction, group = ensemble)) + geom_line()
```
