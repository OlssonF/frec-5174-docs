# NEON data {.appendix}

```{r}
#| message: FALSE
library(tidyverse)
library(lubridate)
library(neonstore)
```

In this document, we will be creating a carbon budget for a NEON site. It was developed in collaboration with John Smith at Montana State University.

NEON data is organized by data product ID in the NEON Date Portal: <https://data.neonscience.org/static/browse.html>

## Download data

First, we are going to want to define the site ID. The four letter site code denotes NEON site. You can learn more about NEON sites here: <https://www.neonscience.org/field-sites/explore-field-sites>. The elevation, latitude , and longitude are needed to convert the diameter measurements to biomass.

```{r}
site <- "TALL"
elevation <- 166	
latitude <- 32.95047
longitude <- -87.393259	
```

## Wood carbon

### Calculate carbon in trees

In this section, we will be calculating carbon in live and dead trees at a NEON site. At the end we will have a *site-level* mean carbon stock in *live trees* for each year that was sampled from the plots that are sampling the ecosystem under the flux tower (e.g., tower plots).

The code below read the data directly from NEON's cloud storage. Since the columns may change between the official releases and the provisional data, they need to be read in separately before being combined.

```{r}

index <-  neonstore:::neon_data(product = "DP1.10098.001",
                                site = site,
                                type="basic")

## Mapping and tagging table

df1 <-index |>
  filter(grepl("mappingandtagging", name)) |> 
  filter(grepl("RELEASE", release)) |> 
  pull(url) |>
  duckdbfs::open_dataset(format="csv", filename = TRUE) |> 
  select(individualID, scientificName) |> 
  collect()

df2 <- index |>
  filter(grepl("mappingandtagging", name)) |> 
  filter(!grepl("RELEASE", release)) |> 
  pull(url) |>
  duckdbfs::open_dataset(format="csv", filename = TRUE) |> 
  select(individualID, scientificName) |> 
  collect()

map_tag_table <- bind_rows(df1,df2) |> 
  group_by(individualID) |> 
  slice(1) |> #This is needed because some individuals change species IDs
  ungroup()

## Individual table

df1 <- index |>
  filter(grepl("apparentindividual", name)) |> 
  filter(grepl("RELEASE", release)) |> 
  pull(url) |>
  duckdbfs::open_dataset(format="csv", filename = TRUE) |> 
  select(individualID, eventID, plotID, date, stemDiameter,plantStatus, measurementHeight) |> 
  collect() 

df2 <- index |>
  filter(grepl("apparentindividual", name)) |> 
  filter(!grepl("RELEASE", release)) |> 
  pull(url) |>
  duckdbfs::open_dataset(format="csv", filename = TRUE) |>
  select(individualID, eventID, plotID, date, stemDiameter,plantStatus, measurementHeight) |> 
  collect()

ind_table <- bind_rows(df1,df2) |> 
  distinct()

## Plot table

df1 <-index |>
  filter(grepl("perplotperyear", name)) |> 
  filter(grepl("RELEASE", release)) |> 
  pull(url) |>
  duckdbfs::open_dataset(format="csv", filename = TRUE) |> 
  select(plotID,totalSampledAreaTrees,plotType) |>  
  collect() 

df2 <- index |>
  filter(grepl("perplotperyear", name)) |> 
  filter(!grepl("RELEASE", release)) |> 
  pull(url) |>
  duckdbfs::open_dataset(perplotperyear$url, format="csv", filename = TRUE) |>
    select(plotID,totalSampledAreaTrees,plotType) |>  
  collect()

plot_table <- bind_rows(df1,df2) |> 
    distinct(plotID, .keep_all = TRUE)
```

The species names in the mapping and tagging table need to be separated into the genus and species so that we can calculate the biomass.

```{r}
genus_species <- unlist(str_split_fixed(map_tag_table$scientificName, " ", 3))

map_tag_table <- map_tag_table %>% 
  mutate(GENUS = genus_species[,1], 
         SPECIES = genus_species[,2]) 
```

Select the key variables in each table and join into the individual table, making sure that we have `GENUS`, `SPECIES`, and `measurementHeight`. These will be important when we use `allodb` to estimate the amount of carbon.

```{r}

combined_table <- left_join(ind_table, map_tag_table, by = "individualID") %>% 
  arrange(plotID,individualID)

combined_table <- inner_join(combined_table, plot_table, by = c("plotID")) %>% 
  arrange(individualID)

combined_table_dbh <- combined_table[which(combined_table$measurementHeight == 130),]

combined_table_dbh <- combined_table_dbh[which(!is.na(combined_table_dbh$stemDiameter)),]

```

Tidy up the individual tree data to include only live trees from the tower plots. Also create a variable that is the year of the sample date.

```{r}
combined_table_live_tower <- combined_table_dbh %>% 
  filter(str_detect(plantStatus,"Live"),
         plotType == "tower") 
```

Calculate the biomass of each tree in the table. We will do this using `get_biomass` in the `allodb` package. This function takes as arguments: `dbh`, `genus`, `species`, `coords`. We have already extracted genus and species, and in fact we have already extracted dbh as well. The steps where we were subsetting based on measurement heights of 130 cm was actually subsetting to include only data that had dbh measurements.

In this next section, as well as a future one where we calculate dead tree carbon, we are going to make a simplfying assumption. We will assume that the below ground biomass of a tree is some fixed proportion of its above ground biomass. In our analysis, we will assume this value is $.3$, but it is a parameter that can be changed.

```{r}
library(allodb)

ag_bg_prop <- 0.3

tree_live_carbon <- combined_table_live_tower %>%
        mutate(ag_tree_kg = get_biomass(
          dbh = combined_table_live_tower$stemDiameter,
          genus = combined_table_live_tower$GENUS,
          species = combined_table_live_tower$SPECIES,
          coords = c(longitude, latitude)
          ),
         bg_tree_kg = ag_tree_kg * ag_bg_prop, ## assumption about ag to bg biomass
         tree_kgC = (ag_tree_kg + bg_tree_kg) * 0.5) ## convert biomass to carbon
```

Calculate the plot level biomass summing up the tree biomass in a plot and dividing by the area of plot.

```{r}

measurement_dates <- tree_live_carbon |> 
  summarise(measure_date = max(date), .by = eventID)

 plot_live_carbon <-  tree_live_carbon %>% 
   left_join(measurement_dates, by = "eventID") |> 
    mutate(treeC_kgCm2 = (tree_kgC)/(totalSampledAreaTrees)) |> 
    summarise(plot_kgCm2 = sum(treeC_kgCm2, na.rm = TRUE), .by = c("plotID", "measure_date"))
```

Visualize the plot level biomass

```{r}
ggplot(plot_live_carbon, aes(x = measure_date, y = plot_kgCm2, color = plotID)) + 
  geom_point() +
  geom_line()
```

Determine the set of plots that are measured each year (a subset, n = 5) are measured each year, while all the plots are measured every 5 years.

```{r}
last_plots <- plot_live_carbon |> 
  filter(measure_date == max(measure_date)) |> 
  pull(plotID)

site_live_carbon <- plot_live_carbon |> 
  filter(plotID %in% last_plots) |> 
  pivot_wider(names_from = plotID, values_from = plot_kgCm2) |> 
  na.omit() |> 
  pivot_longer(-measure_date, names_to = "plotID", values_to = "plot_kgCm2") |> 
    group_by(measure_date) %>%
    summarize(mean_kgCperm2 = mean(plot_kgCm2, na.rm = TRUE),
              sd_kgCperm2 = sd(plot_kgCm2))
```

Plot the site level carbon

```{r}
ggplot(site_live_carbon, aes(x = measure_date, y = mean_kgCperm2)) + 
  geom_point() + 
  geom_errorbar(aes(ymin=mean_kgCperm2-sd_kgCperm2, ymax=mean_kgCperm2+sd_kgCperm2), width=.2,
                 position=position_dodge(0.05))

```

### Calculate carbon in dead trees

We will now use `allodb` to extract the carbon in dead trees.

```{r}
combined_table_dead_tower <- combined_table_dbh %>% 
  filter(grepl("Standing dead",plantStatus),
         plotType == "tower") 
```

Calculate the biomass of each tree in the table. This assumes that standing dead trees have the same carbon as a live tree (which is an incorrect assumption).

```{r}
tree_dead_carbon <- combined_table_dead_tower %>%
    mutate(ag_tree_kg = get_biomass(
          dbh = combined_table_dead_tower$stemDiameter,
          genus = combined_table_dead_tower$GENUS,
          species = combined_table_dead_tower$SPECIES,
          coords = c(longitude, latitude)
          ),
         bg_tree_kg = ag_tree_kg * ag_bg_prop,
         tree_kgC = (ag_tree_kg + bg_tree_kg) * 0.5)
```

Calculate the plot level carbon

```{r}
measurement_dates <- tree_dead_carbon |> 
  summarise(measure_date = max(date), .by = eventID)

 plot_dead_carbon <-  tree_dead_carbon |> 
   left_join(measurement_dates, by = "eventID") |> 
    mutate(treeC_kgCm2 = (tree_kgC)/(totalSampledAreaTrees)) |> 
    summarise(plot_kgCm2 = sum(treeC_kgCm2, na.rm = TRUE), .by = c("plotID", "measure_date"))
```

Visualize plot level carbon

```{r}
ggplot(plot_dead_carbon, aes(x = measure_date, y = plot_kgCm2, color = plotID)) + 
  geom_point() +
  geom_line()
```

Calculate site level carbon

```{r}
 site_dead_carbon <- plot_dead_carbon %>%
    filter(plotID %in% last_plots) |> 
    group_by(measure_date) %>%
    summarize(mean_kgCperm2 = mean(plot_kgCm2, na.rm = TRUE),
              sd_kgCperm2 = sd(plot_kgCm2))
```

Visualize site level carbon

```{r}
ggplot(site_dead_carbon, aes(x = measure_date, y = mean_kgCperm2)) + 
  geom_point() +
  geom_line()
```

## Calculate carbon in trees on the ground (coarse woody debris)

The data needed to calculate carbon in trees that are laying on the ground are in two NEON data products.

```{r}

index <-  neonstore:::neon_data(product = "DP1.10014.001",
                                site = site,
                                type="basic")

cdw_density <- index |>
  filter(grepl("cdw_densitydisk", name)) |> 
  pull(url) |>
  duckdbfs::open_dataset(format="csv", filename = TRUE) |> 
  collect()

log_table <- index |>
  filter(grepl("cdw_densitylog", name)) |> 
  pull(url) |>
  duckdbfs::open_dataset(format="csv", filename = TRUE) |> 
  collect()

index <-  neonstore:::neon_data(product = "DP1.10010.001",
                                site = site,
                                type="basic")

cdw_tally <- index |> 
  filter(grepl("cdw_fieldtally", name)) |> 
  pull(url) |>
  #duckdbfs::open_dataset(format="csv", filename = TRUE) |>
  read_csv(show_col_types = FALSE)
```

```{r}
## filter by tower plot for log table
log_table_filter <- log_table %>% 
  filter(plotType == "tower",
         plotID %in% last_plots)

## filter by tower plot for cdw table
cdw_tally <- cdw_tally %>%
  filter(plotType == 'tower',
         plotID %in% last_plots)

## create 
log_table_filter$gcm3 <- rep(NA, nrow(log_table_filter))

## set site specific volume factor
site_volume_factor <- 8

for (i in 1:nrow(log_table_filter)){
  ## match log table sampleID to cdw density table sample ID
  ind <- which(cdw_density$sampleID == log_table_filter$sampleID[i])
  ## produce g/cm^3 by multiplying bulk density of disk by site volume factor
  log_table_filter$gcm3[i] <- mean(cdw_density$bulkDensDisk[ind]) * site_volume_factor
}

## table of coarse wood
site_cwd_carbon <- log_table_filter %>%
  summarize(mean_kgCperm2 = .5 * sum(gcm3, na.rm = TRUE) * .1) |> 
  mutate(year = unique(log_table_filter$yearBoutBegan))

site_cwd_carbon
```

## Calculate carbon in fine roots

Here we are going to calculate the carbon stored in fine roots using the root chemistry data product. We will calculate the carbon in both dead and alive roots. Though we are interested mostly in live roots, at the time of writing this, there the 2021 NEON data for our site does not have `rootStatus` data available. Thus we will use historical data to compute an estimate of the ratio, so that we don't have to throw away perfectly good information.

```{r}
## root chemistry data product
index <-  neonstore:::neon_data(product = "DP1.10067.001",
                                site = site,
                                type="basic")

bbc_percore <- index |>
  filter(grepl("bbc_percore", name)) |> 
  pull(url) |>
  duckdbfs::open_dataset(format="csv", filename = TRUE) |> 
  collect()

rootmass <- index |>
  filter(grepl("bbc_rootmass", name)) |> 
  pull(url) |>
  duckdbfs::open_dataset(format="csv", filename = TRUE) |> 
  collect()
```

```{r}
rootmass$year = year(rootmass$collectDate)

## set variables for liveDryMass, deadDryMass, unkDryMass, area
rootmass$liveDryMass <- rep(0, nrow(rootmass))
rootmass$deadDryMass <- rep(0, nrow(rootmass))
rootmass$unkDryMass <- rep(0, nrow(rootmass))
rootmass$area <- rep(NA, nrow(rootmass))

for (i in 1:nrow(rootmass)){
  ## match by sample ID
  ind <- which(bbc_percore$sampleID == rootmass$sampleID[i])
  ## extract core sample area
  rootmass$area[i] <- bbc_percore$rootSampleArea[ind]
  ## categorize mass as live, dead, or unknown
  if (is.na(rootmass$rootStatus[i])){
    rootmass$unkDryMass[i] <- rootmass$dryMass[i]
  } else if (rootmass$rootStatus[i] == 'live'){
    rootmass$liveDryMass[i] <- rootmass$dryMass[i]
  } else if (rootmass$rootStatus[i] == 'dead'){
    rootmass$deadDryMass[i] <- rootmass$dryMass[i]
  } else{
    rootmass$unkDryMass[i] <- rootmass$dryMass[i]
  }
}

##
site_roots <- rootmass %>%
  ## filter plotID to only our plots of interest
  filter(plotID %in% last_plots) %>%
  ## group by year
  group_by(year) %>%
  ## sum live, dead, unknown root masses. multiply by
  ## .5 for conversion to kgC/m^2
  summarize(mean_kgCperm2_live = .5*sum(liveDryMass/area, na.rm = TRUE)/1000,
            mean_kgCperm2_dead = .5*sum(deadDryMass/area, na.rm = TRUE)/1000,
            mean_kgCperm2_unk = .5*sum(unkDryMass/area, na.rm = TRUE)/1000,
            year_total = sum(c(mean_kgCperm2_dead, mean_kgCperm2_live, mean_kgCperm2_unk)) / length(unique(plotID)),
            med_date = median(collectDate)) |> 
  rename(mean_kgCperm2 = year_total) |> 
  select(year, mean_kgCperm2)
  
```

## Calculate carbon in soils

```{r}
#Download bieogeochemistry soil data to get carbon concentration
#data_product1 <- "DP1.00097.001"
#Download physical soil data to get bulk density
index <-  neonstore:::neon_data(product = "DP1.00096.001",
                                site = site,
                                type="basic")

mgc_perbiogeosample <- index |>
  filter(grepl("mgp_perbiogeosample", name)) |> 
  pull(url) |>
  duckdbfs::open_dataset(format="csv", filename = TRUE) |> 
  collect()

mgp_perbulksample <- index |>
  filter(grepl("mgp_perbulksample", name)) |> 
  pull(url) |>
  duckdbfs::open_dataset(format="csv", filename = TRUE) |> 
  collect()
```

```{r}
bulk_density <- mgp_perbulksample %>% 
    filter(bulkDensSampleType == "Regular") %>% 
    select(horizonName,bulkDensExclCoarseFrag) 

  #gramsPerCubicCentimeter
horizon_carbon <- mgc_perbiogeosample %>% 
    filter(biogeoSampleType == "Regular") %>% 
    select(horizonName,biogeoTopDepth,biogeoBottomDepth,carbonTot) 

year <- year(as_date(mgp_perbulksample$collectDate[1]))
```

```{r}
  #Unit notes
  #bulkDensExclCoarseFrag = gramsPerCubicCentimeter
  #carbonTot = gramsPerKilogram
  
  #Combine and calculate the carbon of each horizon
horizon_combined <- inner_join(horizon_carbon,bulk_density, by = "horizonName") %>%
    #Convert volume in g per cm3 to mass per area in g per cm2 by multiplying by layer thickness
    mutate(horizon_soil_g_per_cm2 = (biogeoBottomDepth - biogeoTopDepth) * bulkDensExclCoarseFrag) %>% 
    #Units of carbon are g per Kg soil but we have bulk density in g per cm2 so convert Kg soil to g soil
    mutate(CTot_g_per_g_soil = carbonTot*(1/1000),  #Units are g C per g soil
           horizon_C_g_percm2 = CTot_g_per_g_soil*horizon_soil_g_per_cm2, #Units are g C per cm2
           horizon_C_kg_per_m2 = horizon_C_g_percm2 * 10000 / 1000) %>% #Units are g C per m2
    select(-CTot_g_per_g_soil,-horizon_C_g_percm2) %>%
    arrange(biogeoTopDepth)
  
site_soil_carbon <- horizon_combined %>% 
    summarize(soilC_gC_m2 = sum(horizon_C_kg_per_m2)) |> 
  mutate(year = year)
```

```{r}
ggplot(horizon_combined, map = aes(-biogeoTopDepth,horizon_C_kg_per_m2)) +
  geom_line() +
  geom_point() +
  labs(y = "Carbon", x = "Depth", title = "Soil carbon by depth") +
  coord_flip()
```

## Combine together

```{r}
site_live_carbon <- site_live_carbon |> 
  mutate(variable = "live_tree") |> 
  rename(datetime = measure_date) |> 
  select(datetime, variable, mean_kgCperm2)

site_dead_carbon <- site_dead_carbon |> 
  mutate(variable = "dead_trees") |> 
  rename(datetime = measure_date) |> 
  select(datetime, variable, mean_kgCperm2)

site_cwd_carbon <- site_cwd_carbon |> 
  mutate(variable = "down_wood") |> 
  mutate(datetime = as_date(paste(year, "01-01"))) |> 
  select(datetime, variable, mean_kgCperm2)

site_roots <- site_roots |> 
  mutate(variable = "fine_roots") |> 
  mutate(datetime = as_date(paste(year, "01-01"))) |> 
  select(datetime, variable, mean_kgCperm2)

site_soil_carbon <- site_soil_carbon |> 
  mutate(variable = "soil_carbon") |> 
  rename(mean_kgCperm2 = soilC_gC_m2) |> 
  mutate(datetime = as_date(paste(year, "01-01"))) |> 
  select(datetime, variable, mean_kgCperm2)


total_carbon_components <- bind_rows(site_live_carbon, site_dead_carbon, site_cwd_carbon, site_roots, site_soil_carbon)
```

Plot the different pools of carbon

```{r}

total_carbon_components |> 
  ggplot(aes(x = datetime, y = mean_kgCperm2, color = variable)) + 
  geom_point()
```

Combine pools of carbon together to match the stocks used in our simple process model. This converts it to a long data format.

```{r}
total_carbon_simple <- total_carbon_components |> 
  pivot_wider(names_from = variable, values_from = mean_kgCperm2) |> 
  mutate(wood = live_tree + mean(fine_roots, na.rm = TRUE),
         som = mean(dead_trees, na.rm = TRUE) + mean(down_wood, na.rm = TRUE) + mean(soil_carbon, na.rm = TRUE),
         som = ifelse(datetime != min(datetime), NA, som)) |> 
  select(datetime, wood, som) |> 
  pivot_longer(-datetime, names_to = "variable", values_to = "observation")
```

## MODIS LAI

Download the leaf area index

```{r}
lai <- MODISTools::mt_subset(product = "MCD15A2H",
                  lat = latitude,
                  lon =  longitude,
                  band = c("Lai_500m", "FparLai_QC"),
                  start = as_date(min(total_carbon_simple$datetime)),
                  end = Sys.Date(),
                  site_name = site,
                  progress = FALSE)


lai_cleaned <- lai |> 
  mutate(scale = ifelse(band == "FparLai_QC", 1, scale),
         scale = as.numeric(scale),
         value = scale * value,
         datetime = lubridate::as_date(calendar_date)) |> 
  select(band, value, datetime) |> 
  pivot_wider(names_from = band, values_from = value) |> 
  filter(FparLai_QC == 0) |> 
  rename(observation = Lai_500m) |> 
  mutate(variable = "lai") |> 
  select(datetime, variable, observation)
```

Plot MODIS LAI

```{r}
#| warning: false
lai_cleaned |> 
  ggplot(aes(x = datetime, y = observation)) +
  geom_point() +
  geom_smooth(span = 0.12)
```

## Flux data

```{r}
url <- "https://sdsc.osn.xsede.org/bio230014-bucket01/challenges/targets/project_id=neon4cast/duration=P1D/terrestrial_daily-targets.csv.gz"

flux <- read_csv(url, show_col_types = FALSE) |> 
  filter(site_id %in% site, 
         variable == "nee") |> 
  mutate(datetime = as_date(datetime)) |> 
  select(datetime, variable, observation)
```

```{r}
#| warning: false
#| echo: false
ggplot(flux, aes(x = datetime, y = observation)) + geom_point()
```

## Combine together to create data contraints

```{r}
obs <- total_carbon_simple |> 
  bind_rows(lai_cleaned, flux) |> 
  mutate(site_id = site) |> 
  #convert from kgC/m2 to MgC/ha
  mutate(observation = ifelse(variable %in% c("wood", "som") , observation * 10, observation),
         observation = ifelse(variable %in% c("nee") , observation * 0.01, observation))

```

```{r}
#| warning: false
obs |> 
  ggplot(aes(x = datetime, y = observation)) + 
  geom_point() +
  facet_wrap(~variable, scale = "free")
```

```{r}
write_csv(obs, "data/site_carbon_data.csv")
```
